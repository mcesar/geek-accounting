#!/usr/local/bin/node

var util = require('util'),
	argv = require('optimist').argv,
	exec = require('child_process').exec,
	S = require('string')

var URL = process.env.GA_DEFAULT_URL || 'https://localhost:8001';

var GET = 'curl -k -u admin:admin "' + URL + '/charts-of-accounts%s"'
var POST = 'curl -k -u admin:admin -X POST ' + 
							'-H \'Content-Type: application/json\' -d \'{ %s }\' ' + 
							URL + '/charts-of-accounts%s'

var COA_ID = process.env.GA_DEFAULT_COA_ID;

var flags, flagsAndParent, sizes, i;

function isError (stdout) {
	return stdout.indexOf('Internal error') === 0 || 
		stdout.indexOf('Error:') === 0
}

function checkErrorAndPrintId (err, stdout, stderr) {
	if (err) {
		console.log(stderr);
	} else {
		if (isError(stdout)) {
			return console.log(stdout);
		}
		console.log(JSON.parse(stdout)._id);
	}
}

function value (obj, field) {
	var arr = field.split('.'), result = obj, i;
	for (i = 0; i < arr.length; i += 1) {
		result = result[arr[i]];
	}
	return result;
}

function printResults (str, fields, headers, prefix) {
	var result, sizes = [], line, headerLength, v, i, j;
	if (!str || str.length === 0) { return; }
	if (isError(str)) { return console.log(stdout); }

	prefix = prefix || '';
	if (typeof str === 'string') {
		result = JSON.parse(str);
	} else {
		result = str;
	}
	if (headers) {
		for (i = 0; i < headers.length; i += 1) {
			sizes.push(headers[i].length);
		}		
	} else {
		for (i = 0; i < fields.length; i += 1) {
			sizes.push(0);
		}				
	}
	for (i = 0; i < result.length; i += 1) {
		for (j = 0; j < fields.length; j += 1) {
			headerLength = 0;
			if (headers) { headerLength = headers[j].length; }
			sizes[j] = Math.max(
				sizes[j], S(value(result[i], fields[j])).length, headerLength);
		}
	}
	if (headers) {
		line = '';
		for (i = 0; i < headers.length; i += 1) {
			if (line.length > 0) { line += ' '; }
			line += S(headers[i]).padRight(sizes[i]).s;
		}
		console.log(prefix + line);
		line = '';
		for (i = 0; i < headers.length; i += 1) {
			if (line.length > 0) { line += ' '; }
			line += S('-').repeat(sizes[i]).s;
		}
		console.log(prefix + line);
	}
	for (i = 0; i < result.length; i += 1) {
		line = '';
		for (j = 0; j < fields.length; j += 1) {
			if (line.length > 0) { line += ' '; }
			v = value(result[i], fields[j]);
			if (typeof v === 'undefined') { v = ''; }
			line += S(v).padRight(sizes[j]).s;
		}
		console.log(prefix + line);
	}
}

switch (argv._[0]) {
	case 'charts-of-accounts', 'coa':
		exec(util.format(GET, ''), function (err, stdout, stderr) {
			var result, i;
			if (err) {
				console.log(stderr);
			} else {
				printResults(stdout, [ 'name', '_id' ], [ 'Name', 'Id' ]);
			}
		});
		break;
	case 'accounts', 'a':
		exec(util.format(GET, '/' + COA_ID + '/accounts'), 
			function (err, stdout, stderr) {
				var result, i;
				if (err) {
					console.log(stderr);
				} else {
					printResults(stdout, [ 'number', 'name', '_id' ], 
						[ '#', 'Name', 'Id' ]);
				}
			}
		);
		break;
	case 'add-chart-of-accounts', 'ac':
		if (!argv.name && !argv.n) { 
			return console.log("--name or -n is required"); 
		}
		exec(util.format(POST, 
			'"name":"' + (argv.name || argv.n) + '"', '/'), checkErrorAndPrintId
		);
		break;
	case 'add-account', 'aa':
		if (!argv.name && !argv.n) { 
			return console.log("--name or -n is required"); 
		}
		if (!argv.number && !argv['#']) { 
			return console.log("--number or -# is required"); 
		}
		if (!argv.flags && !argv.f) { 
			return console.log("--flags or -f is required"); 
		}
		flags = (argv.flags || argv.f).split(',');
		flagsAndParent = '';
		for (i = 0; i < flags.length; i += 1) {
			flagsAndParent += ', "' + flags[i] + '": true';
		}
		if (argv.parent || argv.p) {
			flagsAndParent += ', "parent": "' + (argv.parent || argv.p) + '"';
		} 
		exec(util.format(POST, 
			'"name":"' + (argv.name || argv.n) + '", ' + 
			'"number": "' + (argv.number || argv['#']) + '"' + 
			flagsAndParent, 
			'/' + COA_ID + '/accounts'), 
			checkErrorAndPrintId
		);
		break;
	case 'add-transaction', 'at':
		function entriesString (entries) {
			var result = '', entry, i;
			for (i = 0; i < entries.length; i += 1) {
				if (i > 0) { result += ', '; }
				entry = entries[i].split(':');
				result += '{ "account": "' + entry[0] + '", ' + 
														 '"value": ' + entry[1] + "} ";
			}
			return result;
		}
		if (!argv.debits && !argv.d) { 
			return console.log("--debits or -d is required"); 
		}
		if (!argv.credits && !argv.c) { 
			return console.log("--credits or -c is required"); 
		}
		if (!argv.at && !argv.a) { 
			return console.log("--at or -a is required"); 
		}
		if (!argv.memo && !argv.m) { 
			return console.log("--memo or -m is required"); 
		}
		exec(util.format(POST, 
			'"debits": [' + 
					entriesString((argv.debits || argv.d).split(',')) + '], ' + 
			'"credits": [' + 
					entriesString((argv.credits || argv.c).split(',')) + '], ' + 
			'"date": "' + (argv.a || argv.d) + '", ' + 
			'"memo": "' + (argv.m || argv.m) + '"', 
			'/' + COA_ID + '/transactions'), 
			checkErrorAndPrintId
		);
		break;
	case 'ledger', 'l':
		if (!argv.account && !argv.a) { 
			return console.log("--account or -a is required"); 
		}
		if (!argv.from && !argv.f) { 
			return console.log("--from or -f is required"); 
		}
		if (!argv.to && !argv.t) { 
			return console.log("--to or -t is required"); 
		}
		exec(util.format(GET, '/' + COA_ID + 
				'/accounts/' + (argv.account || argv.a) + '/ledger?from=' + 
					(argv.from || argv.f) + '&to=' + (argv.to || argv.t)),
			function (err, stdout, stderr) {
				printResults(JSON.parse(stdout).entries, 
					[ 'date', 'memo', 'counterpart.number', 'debit', 'credit' ], 
					[ 'Date', 'Memo', 'Counterpart #', 'Counterpart name', 'Debit', 
						'Credit' ]);
			}
		);
		break;
	case 'balance-sheet', 'bs':
		if (!argv.at && !argv.a) { 
			return console.log("--at or -a is required"); 
		}
		exec(util.format(GET, '/' + COA_ID + 
				'/balance-sheet?at=' + (argv.at || argv.a)), 
			function (err, stdout, stderr) {
				var result, i;
				if (err) {
					console.log(stderr);
				} else {
					printResults(stdout, 
						[ 'account.number', 'account.name', 'value' ], 
						[ '#', 'Name', 'Balance' ]);
				}
			}
		);
		break;
	case 'income-statement', 'is':
		if (!argv.from && !argv.f) { 
			return console.log("--from or -f is required"); 
		}
		if (!argv.to && !argv.t) { 
			return console.log("--to or -t is required"); 
		}
		exec(util.format(GET, '/' + COA_ID + 
				'/income-statement?from=' + (argv.from || argv.f) + 
				'&to=' + (argv.to || argv.t)), 
			function (err, stdout, stderr) {
				var result, i;
				if (err) {
					console.log(stderr);
				} else {
					result = JSON.parse(stdout);
					function printLine (prop, label) {
						if (result[prop]) {
							console.log(label + ': ' + result[prop].balance);
							if (result[prop].details && result[prop].details.length > 0) {
								printResults(result[prop].details, 
									[ 'account.number', 'account.name', 'value' ], 
									null, '    ');
							}
						}
					}
					printLine('grossRevenue', 'Gross revenue');
					printLine('deduction', 'Gross revenue');
					printLine('salesTax', 'Sales tax');
					printLine('netRevenue', 'Net revenue');
					printLine('cost', 'Cost');
					printLine('grossProfit', 'Gross profit');
					printLine('operatingExpense', 'Operating expense');
					printLine('netOperatingIncome', 'Net operating expense');
					printLine('nonOperatingRevenue', 'Non operating revenue');
					printLine('nonOperatingExpense', 'Non operating expense');
					printLine('nonOperatingTax', 'Non operating tax');
					printLine('incomeBeforeIncomeTax', 'Income before income tax');
					printLine('incomeTax', 'Income tax');
					printLine('dividends', 'Dividends');
					printLine('netIncome', 'Net income');					
 				}
			}
		);
		break;
	default:
		console.log('Invalid command: ' + argv._[0]);
		break;
}